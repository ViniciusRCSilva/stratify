generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  email     String    @unique
  name      String
  avatar    String?
  plan      PLAN      @default(FREE)
  createdAt DateTime  @default(now())
  products  Product[]
  clients   Client[]
  orders    Order[]
  invoices  Invoice[]
}

model Tax {
  id   String @id @default(uuid())
  csll Float
  irrf Float
}

model ProductTax {
  id        String  @id @default(uuid())
  simpleTax Float?
  icms      Float?
  ipi       Float?
  pis       Float?
  cofins    Float?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique

  @@map("product_taxes")
}

model Product {
  id         String      @id @default(uuid())
  name       String
  category   String
  unitPrice  Float
  discount   Int         @default(0)
  unitCost   Float
  stock      Int         @default(0)
  location   String
  updatedAt  DateTime    @updatedAt
  orderItem  OrderItem[]
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  productTax ProductTax?

  @@map("products")
}

model Order {
  id            String         @id @default(uuid())
  clientId      String
  client        Client         @relation(fields: [clientId], references: [id])
  status        ORDER_STATUS   @default(PENDING_PAYMENT)
  paymentMethod PAYMENT_METHOD
  totalAmount   Float
  createdAt     DateTime       @default(now())
  orderItems    OrderItem[]
  invoiceId     Invoice?
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Client {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  orders    Order[]
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("clients")
}

model Invoice {
  id            String         @id @default(uuid())
  orderId       String         @unique
  order         Order          @relation(fields: [orderId], references: [id])
  totalAmount   Float
  paymentMethod PAYMENT_METHOD
  issueDate     DateTime       @default(now())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

enum PLAN {
  FREE
  PRO
}

enum ORDER_STATUS {
  PENDING_PAYMENT
  WAITING_CONFIRMATION
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PAYMENT_METHOD {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  PIX
}
